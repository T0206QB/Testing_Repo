"use strict";const OFFLINE_DATA_FILE="offline.js",CACHE_NAME_PREFIX="c2offline",BROADCASTCHANNEL_NAME="offline",CONSOLE_PREFIX="[SW] ",LAZYLOAD_KEYNAME="",broadcastChannel="undefined"==typeof BroadcastChannel?null:new BroadcastChannel(BROADCASTCHANNEL_NAME);function PostBroadcastMessage(e){broadcastChannel&&setTimeout(()=>broadcastChannel.postMessage(e),3e3)}function Broadcast(e){PostBroadcastMessage({type:e})}function BroadcastDownloadingUpdate(e){PostBroadcastMessage({type:"downloading-update",version:e})}function BroadcastUpdateReady(e){PostBroadcastMessage({type:"update-ready",version:e})}function IsUrlInLazyLoadList(e,t){if(t)try{for(const a of t)if(new RegExp(a).test(e))return!0}catch(e){console.error(CONSOLE_PREFIX+"Error matching in lazy-load list: ",e)}return!1}function WriteLazyLoadListToStorage(e){return"undefined"==typeof localforage?Promise.resolve():localforage.setItem(LAZYLOAD_KEYNAME,e)}function ReadLazyLoadListFromStorage(){return"undefined"==typeof localforage?Promise.resolve([]):localforage.getItem(LAZYLOAD_KEYNAME)}function GetCacheBaseName(){return CACHE_NAME_PREFIX+"-"+self.registration.scope}function GetCacheVersionName(e){return GetCacheBaseName()+"-v"+e}async function GetAvailableCacheNames(){var e=await caches.keys();const t=GetCacheBaseName();return e.filter(e=>e.startsWith(t))}async function IsUpdatePending(){return 2<=(await GetAvailableCacheNames()).length}async function GetMainPageUrl(){for(const t of await clients.matchAll({includeUncontrolled:!0,type:"window"})){let e=t.url;if((e=e.startsWith(self.registration.scope)?e.substring(self.registration.scope.length):e)&&"/"!==e)return e=e.startsWith("?")?"/"+e:e}return""}function fetchWithBypass(e,t){return"string"==typeof e&&(e=new Request(e)),t?((t=new URL(e.url)).search+=Math.floor(1e6*Math.random()),fetch(t,{headers:e.headers,mode:e.mode,credentials:e.credentials,redirect:e.redirect,cache:"no-store"})):fetch(e)}async function CreateCacheFromFileList(t,a,o){var e=await Promise.all(a.map(e=>fetchWithBypass(e,o)));let r=!0;for(const s of e)s.ok||(r=!1,console.error(CONSOLE_PREFIX+"Error fetching '"+s.url+"' ("+s.status+" "+s.statusText+")"));if(!r)throw new Error("not all resources were fetched successfully");const n=await caches.open(t);try{return await Promise.all(e.map((e,t)=>n.put(a[t],e)))}catch(e){throw console.error(CONSOLE_PREFIX+"Error writing cache entries: ",e),caches.delete(t),e}}async function UpdateCheck(e){try{var t=await fetchWithBypass(OFFLINE_DATA_FILE,!0);if(!t.ok)throw new Error(OFFLINE_DATA_FILE+" responded with "+t.status+" "+t.statusText);var a,o=await t.json(),r=o.version,n=o.fileList,s=o.lazyLoad,i=GetCacheVersionName(r);await caches.has(i)?await IsUpdatePending()?(console.log(CONSOLE_PREFIX+"Update pending"),Broadcast("update-pending")):(console.log(CONSOLE_PREFIX+"Up to date"),Broadcast("up-to-date")):(a=await GetMainPageUrl(),n.unshift("./"),a&&-1===n.indexOf(a)&&n.unshift(a),console.log(CONSOLE_PREFIX+"Caching "+n.length+" files for offline use"),e?Broadcast("downloading"):BroadcastDownloadingUpdate(r),s&&await WriteLazyLoadListToStorage(s),await CreateCacheFromFileList(i,n,!e),await IsUpdatePending()?(console.log(CONSOLE_PREFIX+"All resources saved, update ready"),BroadcastUpdateReady(r)):(console.log(CONSOLE_PREFIX+"All resources saved, offline support ready"),Broadcast("offline-ready")))}catch(e){console.warn(CONSOLE_PREFIX+"Update check failed: ",e)}}async function GetCacheNameToUse(e,t){return 1===e.length||!t||1<(await clients.matchAll()).length?e[0]:(t=e[e.length-1],console.log(CONSOLE_PREFIX+"Updating to new version"),await Promise.all(e.slice(0,-1).map(e=>caches.delete(e))),t)}async function HandleFetch(t,e){var a=await GetAvailableCacheNames();if(!a.length)return fetch(t.request);a=await GetCacheNameToUse(a,e),e=await caches.open(a),a=await e.match(t.request);if(a)return a;var a=await Promise.all([fetch(t.request),ReadLazyLoadListFromStorage()]),o=a[0],a=a[1];if(IsUrlInLazyLoadList(t.request.url,a))try{await e.put(t.request,o.clone())}catch(e){console.warn(CONSOLE_PREFIX+"Error caching '"+t.request.url+"': ",e)}return o}self.addEventListener("install",e=>{e.waitUntil(UpdateCheck(!0).catch(()=>null))}),self.addEventListener("fetch",e=>{var t,a;new URL(e.request.url).origin===location.origin&&(a=HandleFetch(e,t="navigate"===e.request.mode),t&&e.waitUntil(a.then(()=>UpdateCheck(!1))),e.respondWith(a))});